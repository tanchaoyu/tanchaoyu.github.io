<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>flex弹性布局</title>
    <url>/2021/02/12/flex/</url>
    <content><![CDATA[<h3 id="flex弹性布局"><a href="#flex弹性布局" class="headerlink" title="flex弹性布局"></a>flex弹性布局</h3><p>flex弹性布局出来已经有相当长一段时间了，网上的教程也非常多，我是通过 <a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">阮一峰的博客</a> 学习的。我觉得博客上已经写得很好了。我这里只提一下我当时对页面正常流和盒模型都不太了解的时候flex容易让人感到困惑的点。  </p>
<h4 id="采用-Flex-布局的元素，称为-Flex-容器（flex-container），简称”容器”。它的所有子元素自动成为容器成员，称为-Flex-项目（flex-item），简称”项目”。"><a href="#采用-Flex-布局的元素，称为-Flex-容器（flex-container），简称”容器”。它的所有子元素自动成为容器成员，称为-Flex-项目（flex-item），简称”项目”。" class="headerlink" title="采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。"></a>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。</h4><p>根据这句话进行区分，关于flex的样式即可分为两类，一类作用在容器上，一类作用在项目上。注意区分样式是作用在容器还是项目上，避免写在错误的位置上达不到预期的效果。另外由于我当时看文章没有耐心，喜欢边看边写，结果就是在学会容器上的功能以后已经可以达到大部分的布局效果(水平垂直居中等)马马虎虎能看得过去，就没有再看作用在项目上的样式。导致后续在有关项目元素上相关样式的调整一直不知道怎么处理，经常用什么width，margin之类的去处理效果又不是很好，还麻烦，时隔一个月后重新看完了文章才发现本来就有更便捷效果又好的解决方案，从此以后知道看文章马虎不得。  </p>
<h4 id="要理解flex轴线"><a href="#要理解flex轴线" class="headerlink" title="要理解flex轴线"></a>要理解flex轴线</h4><p>flex里的样式和布局是和轴线有很大关系的，项目也是根据轴线进行排列的。当知道flex存在一条关键的主轴和交叉轴之后再去看flex样式的设置就会觉得很容易理解，他的规定是那么顺其自热。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>前端发布订阅模式</title>
    <url>/2021/03/07/EventEmitter/</url>
    <content><![CDATA[<h3 id="什么是发布订阅模式"><a href="#什么是发布订阅模式" class="headerlink" title="什么是发布订阅模式"></a>什么是发布订阅模式</h3><p>比较官方的解释是：基于一个事件（主题）通道，希望接收通知的对象 Subscriber 通过自定义事件订阅主题，被激活事件的对象 Publisher 通过发布主题事件的方式通知各个订阅该主题的 Subscriber 对象。然而我觉着这个解释并不那么通俗易懂，这里放一张网上的图来辅助理解<br><img src="https://user-gold-cdn.xitu.io/2018/8/29/165844227f32dac6?imageslim"><br>按照我个人比较直白的理解，发布订阅模式这个词就很容易让我联想到以前的邮箱订阅的报纸，这个报纸厂就是我们订阅的目标，每当这个报纸厂发布了新的一期报纸，他就通过邮箱(也就是通俗的通道)通知订阅了报纸的用户，用户取完报纸之后该做什么，那就是用户自己的问题了。有了这个想法之后，把这个模式套入我们前端日常开发的逻辑之中，便会得出一些问题新的解决方案。浏览器的一些 API 如 click 事件，我们可以通过在用户点击 UI 之后获取到这个事件，然后执行一些交互效果，这算不算是一个简单的一对一的发布订阅？我自己的理解应该是的，UI 即发布者，通过事件通知开发者，然后做出相应。一对一的情况是这样，那么一对多呢？这时我又想起来事件监听(addEventListener)，初学的时候用原生 JS 开发一个网页，头顶的导航栏跳转至不同的页面。如果一个个添加事件不仅代码啰嗦不好维护且挂载太多事件会对浏览器造成负担，于是就在父元素上添加事件监听，通过事件冒泡和 currentTarget 判断点击的真正元素，进而跳转至特定的界面。当时只觉得方便，现在感觉这其实也是一种发布订阅模式，根据发布事件的不同执行的订阅操作。</p>
<h3 id="何时使用发布订阅模式"><a href="#何时使用发布订阅模式" class="headerlink" title="何时使用发布订阅模式"></a>何时使用发布订阅模式</h3><ol>
<li>接着上面的继续说，假设用户触发一个事件需要执行大量的操作(实际上应该不太可能)，全部写在一个事件触发的函数里显然是不合适的，这个时候就可以应用上发布订阅模式，我们可以让相关的操作去订阅这个事件，每当触发这个事件时发布这个事件，然后通知订阅者去执行相应的操作，这样子不就避免了在一个事件函数里面写大量代码的问题了吗？而且不需要其中一个操作的时候直接将其取消订阅即可，操作十分方便。(说到提交事件脑子里面又有画面了，Redux 不就是通过 dispatch 一个或多个 action 给 store 然后调用 reducer 去处理，那岂不也是…但 Redux 又略有不同，学识浅薄不敢妄下断言，后面有时间再单独讲 Rudex，雾)。<br>根据矛盾相互转化，这个优势同样可能成为缺陷。可以设想一种情况，如果订阅的事件过多，且关联性不大时改如何处理？这同样是很麻烦的一个问题。这样我们就应该在添加订阅时仅选择那些关键且密切相关的操作。</li>
<li>多请求和大文件传输，假设现在有 100 个请求需要同时完成或者后端限制单次上传文件的大小，你被迫把文件切割成了 100 份上传，该如何处理？其实也简单，promise.all 轻松解决。但是在请求这么多的情况下 promise.all 真的合理吗？浏览器同时允许的请求数量时有限制的，请求等待的时间太长便会超时。这种情况下发布订阅模式可以解决这个问题。每次执行一小部分请求可以用 promise.all 控制，我们可以订阅后端返回的内容，如果返回成功则再发送请求。如果失败，在多请求的情况下可以把失败的请求保存起来，等一轮结束之后在去补发失败的请求。在大文件上传的情况也失败也可以立刻重发当前这一批请求续上之前的片段。</li>
</ol>
<h3 id="大佬如何使用发布订阅模式"><a href="#大佬如何使用发布订阅模式" class="headerlink" title="大佬如何使用发布订阅模式"></a>大佬如何使用发布订阅模式</h3><h4 id="vue-双向数据绑定"><a href="#vue-双向数据绑定" class="headerlink" title="vue 双向数据绑定"></a>vue 双向数据绑定</h4><img src="https://image-static.segmentfault.com/393/893/3938939389-5d25a35ab69ee_articlex">  
利用 Object.defineProperty() 对数据进行劫持，设置一个监听器 Observer，用来监听数据对象的属性，如果属性上发生变化了，交由 Dep 通知订阅者 Watcher 去更新数据，最后指令解析器 Compile 解析对应的指令，进而会执行对应的更新函数，从而更新视图，实现了双向绑定。

<ol>
<li>Observer (数据劫持)</li>
<li>Dep (发布订阅)</li>
<li>Watcher (数据监听)</li>
<li>Compile (模版编译)</li>
</ol>
<h4 id="父子组件通信"><a href="#父子组件通信" class="headerlink" title="父子组件通信"></a>父子组件通信</h4><p>Vue 中，父组件通过 props 向子组件传递数据（自上而下的单向数据流）。父子组件之间的通信，通过自定义事件即 $on , $emit 来实现（子组件 $emit，父组件 $on)。<br>原理其实就是 $emit 发布更新通知，而 $on 订阅接收通知。Vue 中还实现了 $once（一次监听），$off（取消订阅）。</p>
<pre>
    // 订阅
vm.$on('test', function (msg) {
    console.log(msg)
})

// 发布
vm.$emit('test', 'hi')
</pre>
<h3 id="自己实现简单的发布订阅"><a href="#自己实现简单的发布订阅" class="headerlink" title="自己实现简单的发布订阅"></a>自己实现简单的发布订阅</h3><pre>
class EventEmitter {
    constructor(){
        this.event = {}
    }
    on(eventName,fn){
        if(this.event[eventName]){
            this.event[eventName].push(fn);
        }
        else{
            this.event[eventName] = [fn];
        }
    }
    emit(eventName){
        if(this.event[eventName]){
            for(let fn of this.event[eventName]){
                fn();
            }
        }
    }
    remove(eventName,fn){
        if(this.event[eventName]){
            this.event[eventName] = this.event[eventName].filter(fun=>fun!=fn);
        }
    }
}
let em = new EventEmitter();
function happy(){
    console.log('happy');
}
function happy2(){
    console.log('happy2');
}
function said(){
    console.log('said');
}
em.on('sayhappy',happy)
em.on('saysaid',said)
em.emit('sayhappy');
em.emit('saysaid');
em.on('sayhappy',happy2)
em.emit('sayhappy');
em.remove('saysaid',said)
em.emit('saysaid');
</pre>
<p>结果：<img src="http://120.76.61.201:9999/eventemitter.png"><br>发布订阅模式并不难，难的是如何考虑到合适的时机去使用。技能上的差距或许还可以靠努力追上，但思想上的差距我觉得应该只有靠多方便知识的累积并且不断思考才能有些许提升吧。或者这就是业内大佬能设计出这些绝妙的框架的原因，和他们差距还是很大，还是应该多学习。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://segmentfault.com/a/1190000019722065">JavaScript 设计模式（六）：观察者模式与发布订阅模式</a>  </p>
<p><a href="https://www.jianshu.com/p/e0575e17de2a">一个例子 - 看尽并手写JS发布订阅模式</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>城南花已开</title>
    <url>/2021/02/11/music1/</url>
    <content><![CDATA[<h3 id="网易云评论最多的纯音乐"><a href="#网易云评论最多的纯音乐" class="headerlink" title="网易云评论最多的纯音乐"></a>网易云评论最多的纯音乐</h3><p>作为第一篇纯音乐的分享，看了半天歌单也决定不了选哪一首。索性把选择交给网友，选出这首评论最多的纯音。“城南花已开，愿君永常在”虽然这首曲背后的故事让人觉得很惋惜，但是这首曲子的曲调并不特别伤感，本意也是作者鼓舞一名患者粉丝而作的，反而有种积极向上的感觉。抛开背景故事不谈，我觉得前半段重复太多我不是很喜欢，中间舒缓的部分比较喜欢。但是哪有单独抛开背景的音乐呢，王国维有云“一切景语皆情语”我觉得音乐也是这样，如果不附带自己或他人的感情，花既是花，草既是草除了本身的姿态并无更多可言之处。<br><img src="https://w.wallhaven.cc/full/m9/wallhaven-m9pq1y.jpg"/></p>
]]></content>
      <categories>
        <category>纯音乐</category>
      </categories>
      <tags>
        <tag>music</tag>
      </tags>
  </entry>
  <entry>
    <title>JS中的继承</title>
    <url>/2021/03/07/inherit/</url>
    <content><![CDATA[<h3 id="为什么要了解继承"><a href="#为什么要了解继承" class="headerlink" title="为什么要了解继承"></a>为什么要了解继承</h3><p>我个人认为在 JS 中模拟类是没有多大的意义的，因为类在对于编程来说并不必须的。就像我们一开始学习 C 语言，这是一门面向过程的语言，我们不使用类，同样可以完成复杂的功能。只不过后面接触到面向对象的思想，类这个设计模式对于面向对象实现十分优秀，根深蒂固的影响使得我们不断怀疑自己，使用面向对象过程中不使用类是不是就犯了大忌，于是就有了诸多蹩脚的模拟类的行为。现在我们应该至少从思想上打破类对于面向对象的束缚，因为它只不过是实现面向对象的一种途径(而不是唯一途径)。因为我们在 JS 中，通过原型去实现面向对象(封装，继承，多态)的方式也同样十分优秀。</p>
<h3 id="继承分类"><a href="#继承分类" class="headerlink" title="继承分类"></a>继承分类</h3><img src="https://pic2.zhimg.com/80/v2-005cadd6c25c74a8278bcce368b28301_720w.jpg">  
先来个整体印象。如图所示，JS中继承可以按照是否使用object.create函数，将继承分成两部分

<p>其中，原型链继承和原型式继承有一样的优缺点，构造函数继承与寄生式继承也相互对应。寄生组合继承基于 Object.create, 同时优化了组合继承，成为了完美的继承方式。ES6 Class Extends 的结果与寄生组合继承基本一致，但是实现方案又略有不同。</p>
<h3 id="必要了解的一些知识"><a href="#必要了解的一些知识" class="headerlink" title="必要了解的一些知识"></a>必要了解的一些知识</h3><p>了解 JS 的原型继承，那必须对 JS 的原型(prototype)有基本的知识，不然无法真正理解。除此之外还有过程中使用到的一些功能。</p>
<h4 id="new-的过程都在干些什么？"><a href="#new-的过程都在干些什么？" class="headerlink" title="new 的过程都在干些什么？"></a>new 的过程都在干些什么？</h4><p>自己手写一个 new</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">New</span>(<span class="params">father,...arg</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arge = [...arg];</span><br><span class="line">    <span class="keyword">let</span> res = &#123;&#125;;</span><br><span class="line">   <span class="built_in">Object</span>.setprototype(res,father);</span><br><span class="line">       <span class="keyword">let</span> result = father.apply(res,arge);</span><br><span class="line">       <span class="keyword">if</span>(result <span class="keyword">instanceof</span> obj)&#123;</span><br><span class="line">          <span class="keyword">return</span> result;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> res;</span><br><span class="line">       &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>创建一个空对象</li>
<li>通过空对象的<strong>proto</strong>或 object.setprototype()设置为 father.prototype</li>
<li>调用 father.apply({},arg)(this 绑定在新创建的对象中)</li>
<li>返回对象</li>
</ol>
<h4 id="call-apply-的过程在干什么？"><a href="#call-apply-的过程在干什么？" class="headerlink" title="call/apply 的过程在干什么？"></a>call/apply 的过程在干什么？</h4><p>手写 call，需要懂得一些 this 的知识</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.mycall = <span class="function"><span class="keyword">function</span>(<span class="params">obj,...arg</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arge = [...arg];</span><br><span class="line">    obj.fn = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">let</span> res = obj.fn(arge);</span><br><span class="line">    obj.fn = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="instanceof-是怎么判断的？"><a href="#instanceof-是怎么判断的？" class="headerlink" title="instanceof 是怎么判断的？"></a>instanceof 是怎么判断的？</h4><p>说白了就是原型链查找</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">instance</span>(<span class="params">son,father</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        son = <span class="built_in">Object</span>.getPrototypeOf(son);</span><br><span class="line">        <span class="keyword">if</span>(!son)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(son == father.prototype)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="object-create-在干嘛？"><a href="#object-create-在干嘛？" class="headerlink" title="object.create 在干嘛？"></a>object.create 在干嘛？</h4><p>利用一个空对象作为中介，将某个对象直接赋值给空对象构造函数的原型。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">  F.prototype = obj</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="继承的实现"><a href="#继承的实现" class="headerlink" title="继承的实现"></a>继承的实现</h3><p>在啰嗦了一大堆之后终于可以进入本篇的正题</p>
<h4 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.prototy = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">Father.prototype.getprototy = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.prototy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.prototy = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">Son.prototype.getprototy = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.prototy;</span><br><span class="line">&#125;</span><br><span class="line">Son.prototype = <span class="keyword">new</span> Father();</span><br><span class="line"><span class="keyword">let</span> son1 = <span class="keyword">new</span> Son();</span><br><span class="line"><span class="built_in">console</span>.log(son1.getprototy());<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(son1.__proto__.getprototy());<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(son1 <span class="keyword">instanceof</span> Father);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<p>优点</p>
<ul>
<li>父类方法可以复用<br>缺点</li>
<li>父类的引用属性会被所有子类实例共享，多个实例对引用类型的操作会被篡改</li>
<li>子类构建实例时不能向父类传递参数</li>
</ul>
<h4 id="子类构建实例时不能向父类传递参数"><a href="#子类构建实例时不能向父类传递参数" class="headerlink" title="子类构建实例时不能向父类传递参数"></a>子类构建实例时不能向父类传递参数</h4><p>思想的精髓在于用父类去增强子类(你被强化啦！快~)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.color = <span class="string">&quot;black&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Father2.call(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> son2 = <span class="keyword">new</span> Son2();</span><br><span class="line"><span class="built_in">console</span>.log(son2.color);<span class="comment">//black</span></span><br><span class="line"><span class="built_in">console</span>.log(son2 <span class="keyword">instanceof</span> Father2);<span class="comment">//false</span></span><br></pre></td></tr></table></figure>
<p>创建子类实例时通过 call 调用构造函数，于是 son 的每个实例都会将 Father2 中的属性复制一份，解决了原型链继承中多实例相互影响的问题。<br>优点</p>
<ul>
<li>父类的引用属性不会被共享</li>
<li>子类构建实例时可以向父类传递参数<br>缺点</li>
<li>只能继承父类的实例属性和方法，不能继承原型属性/方法</li>
<li>无法实现复用，每个子类都有父类实例函数的副本，影响性能</li>
<li>我认为还应该加上在 prototype 上没有体现继承的关联</li>
</ul>
<h4 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h4><p>组合上述两种方法就是组合继承。用原型链实现对原型属性和方法的继承，用借用构造函数技术来实现实例属性的继承。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father3</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Father3.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line">Father3.prototype.getAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son3</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    Father3.call(<span class="built_in">this</span>,name,age);</span><br><span class="line">    <span class="built_in">this</span>.weight = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">Son3.prototype = <span class="keyword">new</span> Father3();</span><br><span class="line">Son3.prototype.constructor = Son3;</span><br><span class="line">Son3.prototype.getWeight = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.weight;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> father3 = <span class="keyword">new</span> Father3(<span class="string">&#x27;father&#x27;</span>,<span class="number">30</span>);</span><br><span class="line"><span class="keyword">let</span> son3 = <span class="keyword">new</span> Son3(<span class="string">&#x27;son&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(father3.getName());<span class="comment">//father</span></span><br><span class="line"><span class="built_in">console</span>.log(son3.getName());<span class="comment">//son</span></span><br><span class="line"><span class="built_in">console</span>.log(son3.getAge());<span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(son3.getWeight());<span class="comment">//1</span></span><br></pre></td></tr></table></figure>
<p>优点</p>
<ul>
<li>父类的方法可以被复用</li>
<li>父类的引用属性不会被共享</li>
<li>子类构建实例时可以向父类传递参数<br>缺点</li>
<li>两次调用 Father3()，在创建子类实例对象的时候每一个实例其原型中会存在两份相同的父类实例的属性/方法。这种被覆盖的情况造成了性能上的浪费。</li>
</ul>
<h4 id="寄生继承"><a href="#寄生继承" class="headerlink" title="寄生继承"></a>寄生继承</h4><p>使用原型式继承获得一份目标对象的浅拷贝，然后增强了这个浅拷贝的能力。<br>优缺点其实和原型式继承一样，寄生式继承说白了就是能在拷贝来的对象上加点方法，也就是所谓增强能力。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSon</span>(<span class="params">father</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> son = <span class="built_in">Object</span>.create(father);</span><br><span class="line">    son.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> son;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> Father5 = &#123;</span><br><span class="line">    name:<span class="string">&quot;father&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> son5 = createSon(Father5);</span><br><span class="line">son5.name = <span class="string">&#x27;son&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(son5.getName());<span class="comment">//son</span></span><br><span class="line"><span class="built_in">console</span>.log(son5 <span class="keyword">instanceof</span> createSon);<span class="comment">//false</span></span><br></pre></td></tr></table></figure>
<h4 id="组合寄生继承"><a href="#组合寄生继承" class="headerlink" title="组合寄生继承"></a>组合寄生继承</h4><p>组合继承会有两次调用父类的构造函数而造成浪费的缺点，寄生组合继承就可以解决这个问题。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span>(<span class="params">son, father</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 修正子类原型对象指针，指向父类原型的一个副本</span></span><br><span class="line">    son.prototype = <span class="built_in">Object</span>.create(father.prototype);</span><br><span class="line">    <span class="comment">// 增强对象，弥补因重写原型而失去的默认的constructor属性</span></span><br><span class="line">    son.prototype.constructor = son;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Father4</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  Father4.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Son4</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    Father4.call(<span class="built_in">this</span>,name);</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">  inheritPrototype(Son4,Father4);</span><br><span class="line">  Son4.prototype.getAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> son4 = <span class="keyword">new</span> Son4(<span class="string">&#x27;son4&#x27;</span>,<span class="number">3</span>);</span><br><span class="line">  <span class="keyword">let</span> father4 = <span class="keyword">new</span> Father4(<span class="string">&#x27;father4&#x27;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(son4.getName());<span class="comment">//son4</span></span><br><span class="line">  <span class="built_in">console</span>.log(son4.getAge());<span class="comment">//3</span></span><br><span class="line">  <span class="built_in">console</span>.log(son4 <span class="keyword">instanceof</span> Father4)<span class="comment">//true</span></span><br><span class="line">  <span class="built_in">console</span>.log(son4 <span class="keyword">instanceof</span> Son4)<span class="comment">//true</span></span><br><span class="line">  <span class="built_in">console</span>.log(Son4 <span class="keyword">instanceof</span> Father4)<span class="comment">//false,因为在inheritPrototype(Son4,Father4)中，没有修改Son4的__proto__</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(Son4))<span class="comment">//[Function]/ƒ () &#123; [native code] &#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://zhuanlan.zhihu.com/p/110175302">JavaScript 继承的八种写法</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
</search>
