<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>前端发布订阅模式</title>
    <url>/2021/03/07/EventEmitter/</url>
    <content><![CDATA[<h3 id="什么是发布订阅模式"><a href="#什么是发布订阅模式" class="headerlink" title="什么是发布订阅模式"></a>什么是发布订阅模式</h3><p>比较官方的解释是：基于一个事件（主题）通道，希望接收通知的对象 Subscriber 通过自定义事件订阅主题，被激活事件的对象 Publisher 通过发布主题事件的方式通知各个订阅该主题的 Subscriber 对象。然而我觉着这个解释并不那么通俗易懂，这里放一张网上的图来辅助理解<br><img src="https://user-gold-cdn.xitu.io/2018/8/29/165844227f32dac6?imageslim"><br>按照我个人比较直白的理解，发布订阅模式这个词就很容易让我联想到以前的邮箱订阅的报纸，这个报纸厂就是我们订阅的目标，每当这个报纸厂发布了新的一期报纸，他就通过邮箱(也就是通俗的通道)通知订阅了报纸的用户，用户取完报纸之后该做什么，那就是用户自己的问题了。有了这个想法之后，把这个模式套入我们前端日常开发的逻辑之中，便会得出一些问题新的解决方案。浏览器的一些 API 如 click 事件，我们可以通过在用户点击 UI 之后获取到这个事件，然后执行一些交互效果，这算不算是一个简单的一对一的发布订阅？我自己的理解应该是的，UI 即发布者，通过事件通知开发者，然后做出相应。一对一的情况是这样，那么一对多呢？这时我又想起来事件监听(addEventListener)，初学的时候用原生 JS 开发一个网页，头顶的导航栏跳转至不同的页面。如果一个个添加事件不仅代码啰嗦不好维护且挂载太多事件会对浏览器造成负担，于是就在父元素上添加事件监听，通过事件冒泡和 currentTarget 判断点击的真正元素，进而跳转至特定的界面。当时只觉得方便，现在感觉这其实也是一种发布订阅模式，根据发布事件的不同执行的订阅操作。</p>
<h3 id="何时使用发布订阅模式"><a href="#何时使用发布订阅模式" class="headerlink" title="何时使用发布订阅模式"></a>何时使用发布订阅模式</h3><ol>
<li>接着上面的继续说，假设用户触发一个事件需要执行大量的操作(实际上应该不太可能)，全部写在一个事件触发的函数里显然是不合适的，这个时候就可以应用上发布订阅模式，我们可以让相关的操作去订阅这个事件，每当触发这个事件时发布这个事件，然后通知订阅者去执行相应的操作，这样子不就避免了在一个事件函数里面写大量代码的问题了吗？而且不需要其中一个操作的时候直接将其取消订阅即可，操作十分方便。(说到提交事件脑子里面又有画面了，Redux 不就是通过 dispatch 一个或多个 action 给 store 然后调用 reducer 去处理，那岂不也是…但 Redux 又略有不同，学识浅薄不敢妄下断言，后面有时间再单独讲 Rudex，雾)。<br>根据矛盾相互转化，这个优势同样可能成为缺陷。可以设想一种情况，如果订阅的事件过多，且关联性不大时改如何处理？这同样是很麻烦的一个问题。这样我们就应该在添加订阅时仅选择那些关键且密切相关的操作。</li>
<li>多请求和大文件传输，假设现在有 100 个请求需要同时完成或者后端限制单次上传文件的大小，你被迫把文件切割成了 100 份上传，该如何处理？其实也简单，promise.all 轻松解决。但是在请求这么多的情况下 promise.all 真的合理吗？浏览器同时允许的请求数量时有限制的，请求等待的时间太长便会超时。这种情况下发布订阅模式可以解决这个问题。每次执行一小部分请求可以用 promise.all 控制，我们可以订阅后端返回的内容，如果返回成功则再发送请求。如果失败，在多请求的情况下可以把失败的请求保存起来，等一轮结束之后在去补发失败的请求。在大文件上传的情况也失败也可以立刻重发当前这一批请求续上之前的片段。</li>
</ol>
<h3 id="大佬如何使用发布订阅模式"><a href="#大佬如何使用发布订阅模式" class="headerlink" title="大佬如何使用发布订阅模式"></a>大佬如何使用发布订阅模式</h3><h4 id="vue-双向数据绑定"><a href="#vue-双向数据绑定" class="headerlink" title="vue 双向数据绑定"></a>vue 双向数据绑定</h4><img src="https://image-static.segmentfault.com/393/893/3938939389-5d25a35ab69ee_articlex">  
利用 Object.defineProperty() 对数据进行劫持，设置一个监听器 Observer，用来监听数据对象的属性，如果属性上发生变化了，交由 Dep 通知订阅者 Watcher 去更新数据，最后指令解析器 Compile 解析对应的指令，进而会执行对应的更新函数，从而更新视图，实现了双向绑定。

<ol>
<li>Observer (数据劫持)</li>
<li>Dep (发布订阅)</li>
<li>Watcher (数据监听)</li>
<li>Compile (模版编译)</li>
</ol>
<h4 id="父子组件通信"><a href="#父子组件通信" class="headerlink" title="父子组件通信"></a>父子组件通信</h4><p>Vue 中，父组件通过 props 向子组件传递数据（自上而下的单向数据流）。父子组件之间的通信，通过自定义事件即 $on , $emit 来实现（子组件 $emit，父组件 $on)。<br>原理其实就是 $emit 发布更新通知，而 $on 订阅接收通知。Vue 中还实现了 $once（一次监听），$off（取消订阅）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">    <span class="comment">// 订阅</span></span><br><span class="line">vm.$on(<span class="string">&#x27;test&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(msg)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布</span></span><br><span class="line">vm.$emit(<span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;hi&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="自己实现简单的发布订阅"><a href="#自己实现简单的发布订阅" class="headerlink" title="自己实现简单的发布订阅"></a>自己实现简单的发布订阅</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventEmitter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.event = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">on</span>(<span class="params">eventName,fn</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.event[eventName])&#123;</span><br><span class="line">            <span class="built_in">this</span>.event[eventName].push(fn);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.event[eventName] = [fn];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">emit</span>(<span class="params">eventName</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.event[eventName])&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> fn <span class="keyword">of</span> <span class="built_in">this</span>.event[eventName])&#123;</span><br><span class="line">                fn();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">remove</span>(<span class="params">eventName,fn</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.event[eventName])&#123;</span><br><span class="line">            <span class="built_in">this</span>.event[eventName] = <span class="built_in">this</span>.event[eventName].filter(<span class="function"><span class="params">fun</span>=&gt;</span>fun!=fn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> em = <span class="keyword">new</span> EventEmitter();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">happy</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;happy&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">happy2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;happy2&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">said</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;said&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">em.on(<span class="string">&#x27;sayhappy&#x27;</span>,happy)</span><br><span class="line">em.on(<span class="string">&#x27;saysaid&#x27;</span>,said)</span><br><span class="line">em.emit(<span class="string">&#x27;sayhappy&#x27;</span>);</span><br><span class="line">em.emit(<span class="string">&#x27;saysaid&#x27;</span>);</span><br><span class="line">em.on(<span class="string">&#x27;sayhappy&#x27;</span>,happy2)</span><br><span class="line">em.emit(<span class="string">&#x27;sayhappy&#x27;</span>);</span><br><span class="line">em.remove(<span class="string">&#x27;saysaid&#x27;</span>,said)</span><br><span class="line">em.emit(<span class="string">&#x27;saysaid&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>结果：<img src="http://120.76.61.201:9999/eventemitter.png"><br>发布订阅模式并不难，难的是如何考虑到合适的时机去使用。技能上的差距或许还可以靠努力追上，但思想上的差距我觉得应该只有靠多方便知识的累积并且不断思考才能有些许提升吧。或者这就是业内大佬能设计出这些绝妙的框架的原因，和他们差距还是很大，还是应该多学习。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://segmentfault.com/a/1190000019722065">JavaScript 设计模式（六）：观察者模式与发布订阅模式</a>  </p>
<p><a href="https://www.jianshu.com/p/e0575e17de2a">一个例子 - 看尽并手写JS发布订阅模式</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>flex弹性布局</title>
    <url>/2021/02/12/flex/</url>
    <content><![CDATA[<h3 id="flex弹性布局"><a href="#flex弹性布局" class="headerlink" title="flex弹性布局"></a>flex弹性布局</h3><p>flex弹性布局出来已经有相当长一段时间了，网上的教程也非常多，我是通过 <a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">阮一峰的博客</a> 学习的。我觉得博客上已经写得很好了。我这里只提一下我当时对页面正常流和盒模型都不太了解的时候flex容易让人感到困惑的点。  </p>
<h4 id="采用-Flex-布局的元素，称为-Flex-容器（flex-container），简称”容器”。它的所有子元素自动成为容器成员，称为-Flex-项目（flex-item），简称”项目”。"><a href="#采用-Flex-布局的元素，称为-Flex-容器（flex-container），简称”容器”。它的所有子元素自动成为容器成员，称为-Flex-项目（flex-item），简称”项目”。" class="headerlink" title="采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。"></a>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。</h4><p>根据这句话进行区分，关于flex的样式即可分为两类，一类作用在容器上，一类作用在项目上。注意区分样式是作用在容器还是项目上，避免写在错误的位置上达不到预期的效果。另外由于我当时看文章没有耐心，喜欢边看边写，结果就是在学会容器上的功能以后已经可以达到大部分的布局效果(水平垂直居中等)马马虎虎能看得过去，就没有再看作用在项目上的样式。导致后续在有关项目元素上相关样式的调整一直不知道怎么处理，经常用什么width，margin之类的去处理效果又不是很好，还麻烦，时隔一个月后重新看完了文章才发现本来就有更便捷效果又好的解决方案，从此以后知道看文章马虎不得。  </p>
<h4 id="要理解flex轴线"><a href="#要理解flex轴线" class="headerlink" title="要理解flex轴线"></a>要理解flex轴线</h4><p>flex里的样式和布局是和轴线有很大关系的，项目也是根据轴线进行排列的。当知道flex存在一条关键的主轴和交叉轴之后再去看flex样式的设置就会觉得很容易理解，他的规定是那么顺其自热。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>http,http2和https</title>
    <url>/2021/03/21/http/</url>
    <content><![CDATA[<h3 id="http"><a href="#http" class="headerlink" title="http"></a>http</h3><p>在最开始的http协议中连接是没办法进行复用的，这里的连接指的是tcp连接。即没发送一个http请求就要经历创建tcp连接，等待http的处理，关闭tcp连接的过程。并且新建tcp连接要从新执行慢开始的过程，对于大文件传输速度有影响。所以在http1.1中就推出了Keep-Alive并在http1.1中头部信息Connection中默认开启。Keep-Alive使得在一个http请求完成以后不立即关闭tcp连接，而保存tcp连接一段时间(keepalive_timeout控制，超时无http请求则关闭)，使得在时间内新的http请求可以复用这个tcp连接避免了每一个http请求都重新连接tcp的消耗。且因为同一域名对同时保存tcp连接的数量的限制，如果有多个http请求时不可能都创建一个tcp连接去发送请求，http1.1中允许在一个tcp内一个http请求还没完全相应时发送下一个请求(但与http2不同的是，相应严格按照请求的先后顺序)。</p>
<h4 id="当保持长连接时，如何判断一次请求已经完成？"><a href="#当保持长连接时，如何判断一次请求已经完成？" class="headerlink" title="当保持长连接时，如何判断一次请求已经完成？"></a>当保持长连接时，如何判断一次请求已经完成？</h4><p>Content-Length<br>Content-Length表示实体内容的长度。浏览器通过这个字段来判断当前请求的数据是否已经全部接收。<br>所以，当浏览器请求的是一个静态资源时，即服务器能明确知道返回内容的长度时，可以设置Content-Length来控制请求的结束。但当服务器并不知道请求结果的长度时，如一个动态的页面或者数据，Content-Length就无法解决上面的问题，这个时候就需要用到Transfer-Encoding字段。</p>
<p>Transfer-Encoding<br>Transfer-Encoding是指传输编码，在上面的问题中，当服务端无法知道实体内容的长度时，就可以通过指定Transfer-Encoding: chunked来告知浏览器当前的编码是将数据分成一块一块传递的。当然, 还可以指定Transfer-Encoding: gzip, chunked表明实体内容不仅是gzip压缩的，还是分块传递的。最后，当浏览器接收到一个长度为0的chunked时， 知道当前请求内容已全部接收。</p>
<h4 id="复用tcp连接对大文件传输的优势"><a href="#复用tcp连接对大文件传输的优势" class="headerlink" title="复用tcp连接对大文件传输的优势"></a>复用tcp连接对大文件传输的优势</h4><p>这就要说到tcp的慢开始和拥塞避免算法。假设传输允许的拥塞窗口的上限是24个，初始为1。发送方每收到一个确认报文(ack)就增加一倍的拥塞窗口然后开始下一轮传输。这样拥塞窗口的数量随传输轮次指数级增加，当超过慢开始门限值时，便启动拥塞控制算法，拥塞窗口数量增加改为线性增加。但是在我们进行http请求时，一般往往是很难达到拥塞窗口的上限的，此时关闭tcp连接，重新创建tcp连接进行大文件传输的话，初始的传输速度就会比较慢，从而影响传输的速度。</p>
<h3 id="http2-0"><a href="#http2-0" class="headerlink" title="http2.0"></a>http2.0</h3><p>http2.0提供了很多新特性，极大提高了传输速度</p>
<h4 id="二进制传输，分帧传输"><a href="#二进制传输，分帧传输" class="headerlink" title="二进制传输，分帧传输"></a>二进制传输，分帧传输</h4><p>帧：HTTP/2 数据通信的最小单位消息：指 HTTP/2 中逻辑上的 HTTP 消息。例如请求和响应等，消息由一个或多个帧组成。</p>
<p>流：存在于连接中的一个虚拟通道。流可以承载双向消息，每个流都有一个唯一的整数ID。</p>
<p>在http1.1中一个http请求是一个整体，包含头部信息(head)和请求数据(data)，在http2.0中将请求信息进一步拆分为帧，并标上流的id。如head1，data1。浏览器可以同时将这些帧放到tcp管道中进行报文传输。在http2的会通过流的id对这些帧进行处理重组，再交由应用层进行处理。</p>
<h4 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a>多路复用</h4><p>在http1.1中，如果想要同时获得多个http请求的相应，就必须同时建立和维护多个tcp连接。在http2.0中所有请求都通过一个tcp连接处理。数据流以消息的形式发送，而消息又由一个或多个帧组成，多个帧之间可以乱序发送，因为根据帧首部的流标识可以重新组装(得益于分帧传输，单个连接上可以并行交错的请求和响应，之间互不干扰)。在HTTP/2中，每个请求都可以带一个31bit的优先值，0表示最高优先级， 数值越大优先级越低。有了这个优先值，客户端和服务器就可以在处理不同的流时采取不同的策略，以最优的方式发送流、消息和帧。<br><img src="https://raw.githubusercontent.com/tanchaoyu/tanchaoyu.github.io/main/img/http1.png"></p>
<h4 id="服务端推送"><a href="#服务端推送" class="headerlink" title="服务端推送"></a>服务端推送</h4><p>在我们平时访问一个网页的情况下，会向服务器请求这个html文件，然后根据html上的link，src等属性去加载需要的css、js和所需要的图片等资源。在http2.0中服务端推送一定程度上改变了这种固定的模式。服务端可以在客户端请求一个资源时，向它推送另外的资源。比如在客户端请求index.html文件时，把main.css和main.js文件也推送回去。<br><img src="https://raw.githubusercontent.com/tanchaoyu/tanchaoyu.github.io/main/img/http2.png"><br>另外需要补充的是,服务端可以主动推送，客户端也有权利选择是否接收。如果服务端推送的资源已经被浏览器缓存过，浏览器可以通过发送RST_STREAM帧来拒收。主动推送也遵守同源策略，换句话说，服务器不能随便将第三方资源推送给客户端，而必须是经过双方确认才行。</p>
<h4 id="头部压缩"><a href="#头部压缩" class="headerlink" title="头部压缩"></a>头部压缩</h4><p>http每次发送请求都会携带头部信息，但是这一部分信息很多是重复的。HTTP/2在客户端和服务器端使用“首部表”来跟踪和存储之前发送的键－值对，对于相同的数据，不再通过每次请求和响应发送。首部表在HTTP/2的连接存续期内始终存在，由客户端和服务器共同渐进地更新。每个新的首部键－值对要么被追加到当前表的末尾，要么替换表中之前的值。<br><img src="https://pic3.zhimg.com/80/v2-1573194744d005dd110bbeac3a9b5246_720w.jpg"></p>
<h3 id="https"><a href="#https" class="headerlink" title="https"></a>https</h3><p>在应用层与传输层之间添加一层SSL/TLS协议使得客户端与服务端在连接后使用对称加密进行数据传输<br><img src="https://pic1.zhimg.com/80/v2-5e2241fae8b593ff7f3b3a308ef81c10_720w.png"><br>这一张图具体表现了https请求的流程，首先是客户端向服务端发送请求，然后服务端给客户端发送自己在权威机构申请的证书。客户端在获取到证书后<br>对证书进行验证。在确定证书无误之后用从证书信息中获取到的服务端的公钥进行非对称加密接下来的传输信息，如：你好，接下来我们用对称加密传输数据吧，<br>这是密钥1和密钥2你选一个吧。服务端收到后选择一种加密方式进行加密回复确认内容，接下来就使用相应的加密方式进行数据传输。那么客户端是如何验证<br>证书的真伪的呢？我们来看这张图<br><img src="https://pic3.zhimg.com/v2-5c0610bf16a7baf9bae7c6787dd7756a_r.jpg"><br>首先在客户端获取到证书之后会在本地进行查询解密数字签名所需要机构的公钥，因为权威的机构是比较少的，所以权威机构的公钥都被内置在操作系统或者浏览器中。如果客户端在本地没有找到相应的公钥，就会判断信息来源不可靠。从这一点也可以看出，如果在本地胡乱安装非权威机构的公钥是非常危险的，因为这为伪造相对应的假证书提供了便利。在找到相对应的权威机构的公钥之后验证还没有结束，在解密出信息摘要之后，还会对证书信息执行与发证机构相同的hash算法，再对比与信息摘要是否相同，如果不相同则判定用户信息遭到了篡改。如果有中间人拦截了证书，并用发证机构的公钥解密数字签名得出信息摘要，并且修改了证书的内容。但是因为不知道发证机构的私钥没有办法生成对应的数字签名，如果把原数字前面发送给客户端，那改变后的证书内容经过hash算法生成的信息摘要比较和数字签名解密出的信息摘要必然不相同，所以就避免了拦截攻击。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>JS中的继承</title>
    <url>/2021/03/07/inherit/</url>
    <content><![CDATA[<h3 id="为什么要了解继承"><a href="#为什么要了解继承" class="headerlink" title="为什么要了解继承"></a>为什么要了解继承</h3><p>我个人认为在 JS 中模拟类是没有多大的意义的，因为类在对于编程来说并不必须的。就像我们一开始学习 C 语言，这是一门面向过程的语言，我们不使用类，同样可以完成复杂的功能。只不过后面接触到面向对象的思想，类这个设计模式对于面向对象实现十分优秀，根深蒂固的影响使得我们不断怀疑自己，使用面向对象过程中不使用类是不是就犯了大忌，于是就有了诸多蹩脚的模拟类的行为。现在我们应该至少从思想上打破类对于面向对象的束缚，因为它只不过是实现面向对象的一种途径(而不是唯一途径)。因为我们在 JS 中，通过原型去实现面向对象(封装，继承，多态)的方式也同样十分优秀。</p>
<h3 id="继承分类"><a href="#继承分类" class="headerlink" title="继承分类"></a>继承分类</h3><img src="https://pic2.zhimg.com/80/v2-005cadd6c25c74a8278bcce368b28301_720w.jpg">  
先来个整体印象。如图所示，JS中继承可以按照是否使用object.create函数，将继承分成两部分

<p>其中，原型链继承和原型式继承有一样的优缺点，构造函数继承与寄生式继承也相互对应。寄生组合继承基于 Object.create, 同时优化了组合继承，成为了完美的继承方式。ES6 Class Extends 的结果与寄生组合继承基本一致，但是实现方案又略有不同。</p>
<h3 id="必要了解的一些知识"><a href="#必要了解的一些知识" class="headerlink" title="必要了解的一些知识"></a>必要了解的一些知识</h3><p>了解 JS 的原型继承，那必须对 JS 的原型(prototype)有基本的知识，不然无法真正理解。除此之外还有过程中使用到的一些功能。</p>
<h4 id="new-的过程都在干些什么？"><a href="#new-的过程都在干些什么？" class="headerlink" title="new 的过程都在干些什么？"></a>new 的过程都在干些什么？</h4><p>自己手写一个 new</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">New</span>(<span class="params">father,...arg</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arge = [...arg];</span><br><span class="line">    <span class="keyword">let</span> res = &#123;&#125;;</span><br><span class="line">   <span class="built_in">Object</span>.setprototype(res,father);</span><br><span class="line">       <span class="keyword">let</span> result = father.apply(res,arge);</span><br><span class="line">       <span class="keyword">if</span>(result <span class="keyword">instanceof</span> obj)&#123;</span><br><span class="line">          <span class="keyword">return</span> result;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> res;</span><br><span class="line">       &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>创建一个空对象</li>
<li>通过空对象的<strong>proto</strong>或 object.setprototype()设置为 father.prototype</li>
<li>调用 father.apply({},arg)(this 绑定在新创建的对象中)</li>
<li>返回对象</li>
</ol>
<h4 id="call-apply-的过程在干什么？"><a href="#call-apply-的过程在干什么？" class="headerlink" title="call/apply 的过程在干什么？"></a>call/apply 的过程在干什么？</h4><p>手写 call，需要懂得一些 this 的知识</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.mycall = <span class="function"><span class="keyword">function</span>(<span class="params">obj,...arg</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arge = [...arg];</span><br><span class="line">    obj.fn = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">let</span> res = obj.fn(arge);</span><br><span class="line">    obj.fn = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="instanceof-是怎么判断的？"><a href="#instanceof-是怎么判断的？" class="headerlink" title="instanceof 是怎么判断的？"></a>instanceof 是怎么判断的？</h4><p>说白了就是原型链查找</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">instance</span>(<span class="params">son,father</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        son = <span class="built_in">Object</span>.getPrototypeOf(son);</span><br><span class="line">        <span class="keyword">if</span>(!son)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(son == father.prototype)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="object-create-在干嘛？"><a href="#object-create-在干嘛？" class="headerlink" title="object.create 在干嘛？"></a>object.create 在干嘛？</h4><p>利用一个空对象作为中介，将某个对象直接赋值给空对象构造函数的原型。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">  F.prototype = obj</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="继承的实现"><a href="#继承的实现" class="headerlink" title="继承的实现"></a>继承的实现</h3><p>在啰嗦了一大堆之后终于可以进入本篇的正题</p>
<h4 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.prototy = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">Father.prototype.getprototy = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.prototy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.prototy = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">Son.prototype.getprototy = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.prototy;</span><br><span class="line">&#125;</span><br><span class="line">Son.prototype = <span class="keyword">new</span> Father();</span><br><span class="line"><span class="keyword">let</span> son1 = <span class="keyword">new</span> Son();</span><br><span class="line"><span class="built_in">console</span>.log(son1.getprototy());<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(son1.__proto__.getprototy());<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(son1 <span class="keyword">instanceof</span> Father);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<p>优点</p>
<ul>
<li>父类方法可以复用<br>缺点</li>
<li>父类的引用属性会被所有子类实例共享，多个实例对引用类型的操作会被篡改</li>
<li>子类构建实例时不能向父类传递参数</li>
</ul>
<h4 id="子类构建实例时不能向父类传递参数"><a href="#子类构建实例时不能向父类传递参数" class="headerlink" title="子类构建实例时不能向父类传递参数"></a>子类构建实例时不能向父类传递参数</h4><p>思想的精髓在于用父类去增强子类(你被强化啦！快~)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.color = <span class="string">&quot;black&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Father2.call(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> son2 = <span class="keyword">new</span> Son2();</span><br><span class="line"><span class="built_in">console</span>.log(son2.color);<span class="comment">//black</span></span><br><span class="line"><span class="built_in">console</span>.log(son2 <span class="keyword">instanceof</span> Father2);<span class="comment">//false</span></span><br></pre></td></tr></table></figure>
<p>创建子类实例时通过 call 调用构造函数，于是 son 的每个实例都会将 Father2 中的属性复制一份，解决了原型链继承中多实例相互影响的问题。<br>优点</p>
<ul>
<li>父类的引用属性不会被共享</li>
<li>子类构建实例时可以向父类传递参数<br>缺点</li>
<li>只能继承父类的实例属性和方法，不能继承原型属性/方法</li>
<li>无法实现复用，每个子类都有父类实例函数的副本，影响性能</li>
<li>我认为还应该加上在 prototype 上没有体现继承的关联</li>
</ul>
<h4 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h4><p>组合上述两种方法就是组合继承。用原型链实现对原型属性和方法的继承，用借用构造函数技术来实现实例属性的继承。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father3</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Father3.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line">Father3.prototype.getAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son3</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    Father3.call(<span class="built_in">this</span>,name,age);</span><br><span class="line">    <span class="built_in">this</span>.weight = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">Son3.prototype = <span class="keyword">new</span> Father3();</span><br><span class="line">Son3.prototype.constructor = Son3;</span><br><span class="line">Son3.prototype.getWeight = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.weight;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> father3 = <span class="keyword">new</span> Father3(<span class="string">&#x27;father&#x27;</span>,<span class="number">30</span>);</span><br><span class="line"><span class="keyword">let</span> son3 = <span class="keyword">new</span> Son3(<span class="string">&#x27;son&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(father3.getName());<span class="comment">//father</span></span><br><span class="line"><span class="built_in">console</span>.log(son3.getName());<span class="comment">//son</span></span><br><span class="line"><span class="built_in">console</span>.log(son3.getAge());<span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(son3.getWeight());<span class="comment">//1</span></span><br></pre></td></tr></table></figure>
<p>优点</p>
<ul>
<li>父类的方法可以被复用</li>
<li>父类的引用属性不会被共享</li>
<li>子类构建实例时可以向父类传递参数<br>缺点</li>
<li>两次调用 Father3()，在创建子类实例对象的时候每一个实例其原型中会存在两份相同的父类实例的属性/方法。这种被覆盖的情况造成了性能上的浪费。</li>
</ul>
<h4 id="寄生继承"><a href="#寄生继承" class="headerlink" title="寄生继承"></a>寄生继承</h4><p>使用原型式继承获得一份目标对象的浅拷贝，然后增强了这个浅拷贝的能力。<br>优缺点其实和原型式继承一样，寄生式继承说白了就是能在拷贝来的对象上加点方法，也就是所谓增强能力。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSon</span>(<span class="params">father</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> son = <span class="built_in">Object</span>.create(father);</span><br><span class="line">    son.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> son;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> Father5 = &#123;</span><br><span class="line">    name:<span class="string">&quot;father&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> son5 = createSon(Father5);</span><br><span class="line">son5.name = <span class="string">&#x27;son&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(son5.getName());<span class="comment">//son</span></span><br><span class="line"><span class="built_in">console</span>.log(son5 <span class="keyword">instanceof</span> createSon);<span class="comment">//false</span></span><br></pre></td></tr></table></figure>
<h4 id="组合寄生继承"><a href="#组合寄生继承" class="headerlink" title="组合寄生继承"></a>组合寄生继承</h4><p>组合继承会有两次调用父类的构造函数而造成浪费的缺点，寄生组合继承就可以解决这个问题。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span>(<span class="params">son, father</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 修正子类原型对象指针，指向父类原型的一个副本</span></span><br><span class="line">    son.prototype = <span class="built_in">Object</span>.create(father.prototype);</span><br><span class="line">    <span class="comment">// 增强对象，弥补因重写原型而失去的默认的constructor属性</span></span><br><span class="line">    son.prototype.constructor = son;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Father4</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  Father4.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Son4</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    Father4.call(<span class="built_in">this</span>,name);</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">  inheritPrototype(Son4,Father4);</span><br><span class="line">  Son4.prototype.getAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> son4 = <span class="keyword">new</span> Son4(<span class="string">&#x27;son4&#x27;</span>,<span class="number">3</span>);</span><br><span class="line">  <span class="keyword">let</span> father4 = <span class="keyword">new</span> Father4(<span class="string">&#x27;father4&#x27;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(son4.getName());<span class="comment">//son4</span></span><br><span class="line">  <span class="built_in">console</span>.log(son4.getAge());<span class="comment">//3</span></span><br><span class="line">  <span class="built_in">console</span>.log(son4 <span class="keyword">instanceof</span> Father4)<span class="comment">//true</span></span><br><span class="line">  <span class="built_in">console</span>.log(son4 <span class="keyword">instanceof</span> Son4)<span class="comment">//true</span></span><br><span class="line">  <span class="built_in">console</span>.log(Son4 <span class="keyword">instanceof</span> Father4)<span class="comment">//false,因为在inheritPrototype(Son4,Father4)中，没有修改Son4的__proto__</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(Son4))<span class="comment">//[Function]/ƒ () &#123; [native code] &#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://zhuanlan.zhihu.com/p/110175302">JavaScript 继承的八种写法</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>城南花已开</title>
    <url>/2021/02/11/music1/</url>
    <content><![CDATA[<h3 id="网易云评论最多的纯音乐"><a href="#网易云评论最多的纯音乐" class="headerlink" title="网易云评论最多的纯音乐"></a>网易云评论最多的纯音乐</h3><p>作为第一篇纯音乐的分享，看了半天歌单也决定不了选哪一首。索性把选择交给网友，选出这首评论最多的纯音。“城南花已开，愿君永常在”虽然这首曲背后的故事让人觉得很惋惜，但是这首曲子的曲调并不特别伤感，本意也是作者鼓舞一名患者粉丝而作的，反而有种积极向上的感觉。抛开背景故事不谈，我觉得前半段重复太多我不是很喜欢，中间舒缓的部分比较喜欢。但是哪有单独抛开背景的音乐呢，王国维有云“一切景语皆情语”我觉得音乐也是这样，如果不附带自己或他人的感情，花既是花，草既是草除了本身的姿态并无更多可言之处。<br><img src="https://w.wallhaven.cc/full/m9/wallhaven-m9pq1y.jpg"/></p>
]]></content>
      <categories>
        <category>纯音乐</category>
      </categories>
      <tags>
        <tag>music</tag>
      </tags>
  </entry>
  <entry>
    <title>react中的diff算法的看法与困惑</title>
    <url>/2021/03/09/reactdiff/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这篇内容只是我根据官网文档和一些他人博客分析的内容表达我对 react diff 算法的一些理解和疑惑，因为水平有限，相关源码部分并不是很理解。这里只是抛砖引玉，希望各位大佬们对疑惑予以解答，错误予以指正。  </p>
<h3 id="react-diff-算法的目的"><a href="#react-diff-算法的目的" class="headerlink" title="react diff 算法的目的"></a>react diff 算法的目的</h3><p>当你使用 React ，在任何一个单点时刻你可以认为 render() 函数的作用是创建 React 元素树。在下一个 state 或props 更新时，render() 函数将会返回一个不同的 React 元素树。接下来 React 将会找出如何高效地更新 UI 来匹配最近时刻的 React 元素树。</p>
<p>目前存在大量通用的方法能够以最少的操作步骤将一个树转化成另外一棵树。然而，这个算法是复杂度为O(n<sup>3</sup>)，其中n 为树中元素的个数。</p>
<p>如果你在 React 中展示 1000 个元素，那么每次更新都需要10亿次的比较，这样的代价过于昂贵。然而，React 基于以下两个假设实现了时间复杂度为 O(n) 的算法:</p>
<ol>
<li>不同类型的两个元素将会产生不同的树。</li>
<li>开发人员可以使用一个 key prop 来指示在不同的渲染中那个那些元素可以保持稳定。<br>事实上，这些假设在几乎所有的用例中都是有效的。  </li>
</ol>
<h3 id="diff算法的过程"><a href="#diff算法的过程" class="headerlink" title="diff算法的过程"></a>diff算法的过程</h3><p>这一部分的内容官网文档同一些主流的博客解析出现不一样的地方。也许是官方文档为了简化说明，能让更多人通俗易懂所做的必要简化。也许是部分博客作者阅读源码后分析出的结果有所出入，这一部分将结合两者进行分析。<br>首先是一篇高阅读量的博客内容<a href="https://www.jianshu.com/p/3ba0822018cf">React之diff算法</a><br>文中将 diff 算法分为三大策略<br>diff策略<br>React用 三大策略 将O(n^3)复杂度 转化为 O(n)复杂度</p>
<ul>
<li><p>策略一（tree diff）：<br>Web UI中DOM节点跨层级的移动操作特别少，可以忽略不计。</p>
</li>
<li><p>策略二（component diff）：<br>拥有相同类的两个组件 生成相似的树形结构，<br>拥有不同类的两个组件 生成不同的树形结构。</p>
</li>
<li><p>策略三（element diff）：<br>对于同一层级的一组子节点，通过唯一id区分。  </p>
</li>
</ul>
<h4 id="然后对三个策略进行了逐一解析，这里我对这篇博客策略一的表述感到困惑，所以仅仅分析策略一。"><a href="#然后对三个策略进行了逐一解析，这里我对这篇博客策略一的表述感到困惑，所以仅仅分析策略一。" class="headerlink" title="然后对三个策略进行了逐一解析，这里我对这篇博客策略一的表述感到困惑，所以仅仅分析策略一。"></a>然后对三个策略进行了逐一解析，这里我对这篇博客策略一的表述感到困惑，所以仅仅分析策略一。</h4><p>tree diff<br>（1）React通过updateDepth对Virtual DOM树进行层级控制。<br>（2）对树分层比较，两棵树 只对同一层次节点 进行比较。如果该节点不存在时，则该节点及其子节点会被完全删除，不会再进一步比较。<br>（3）只需遍历一次，就能完成整棵DOM树的比较。<br><img src="https://pic2.zhimg.com/80/v2-0902dd8939ae03901d2b786cc556a815_720w.jpg"></p>
<p>那么问题来了，如果DOM节点出现了跨层级操作,diff会咋办呢？<br>答：diff只简单考虑同层级的节点位置变换，如果是跨层级的话，只有创建节点和删除节点的操作。<br><img src="https://upload-images.jianshu.io/upload_images/5518628-41118df156ed8d6e.png"></p>
<p>如上图所示，以A为根节点的整棵树会被重新创建，而不是移动，因此 官方建议不要进行DOM节点跨层级操作，可以通过CSS隐藏、显示节点，而不是真正地移除、添加DOM节点。</p>
<p>以上是博客原文，对DOM树进行层级控制没有问题，但是（2）中对树进行分层比较的过程就很令人疑惑了，分层比较是tree diff有自己的方法进行还是需要依赖component diff 和 element diff 进行？如果不同结构的树在tree diff中已经完成了调整那后两步还有什么意义？</p>
<p>带着这样的疑惑我们再回去阅读官方文档<a href="https://react.html.cn/docs/reconciliation.html">一致性比较（Reconciliation）</a>，由于官方文档的过程也比较长，我这里只罗列一些关键信息进行分析，我理解的diff过程放在后面单独表述。<br>首先是一句很关键的信息：当比较不同的两个树，React 首先比较两个根元素。根据根跟的类型不同，它有不同的行为。然后进行分类处理</p>
<ul>
<li>元素类型不相同：无论什么时候，当根元素类型不同时，React 将会销毁原先的树并重写构建新的树。</li>
<li>DOM元素类型相同：当比较两个相同类型的 React DOM 元素时，React 检查它们的属性（attributes），保留相同的底层 DOM 节点，只更新反生改变的属性（attributes）。</li>
<li>相同类型的组件: 当一个组件更新的时候，组件实例保持不变，以便在渲染中保持state。React会更新组件实例的属性来匹配新的元素，并在元素实例上调用 componentWillReceiveProps() 和 componentWillUpdate()。接下来， render() 方法会被调用并且diff算法对上一次的结果和新的结果进行递归。</li>
<li>子元素递归： 这一部分的翻译有点问题，所以放上英文文档原文，并且配上官网代码进行说明。By default, when recursing on the children of a DOM node, React just iterates over both lists of children at the same time and generates a mutation whenever there’s a difference.<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>first<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>second<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>first<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>second<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>third<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
React 会比较两个 <code>&lt;li&gt;first&lt;/li&gt;</code> 树与两个 <code>&lt;li&gt;second&lt;/li&gt;</code> 树，然后插入 <code>&lt;li&gt;third&lt;/li&gt;</code> 树。注意这里文档中对li使用了树这个描述，即便它已经没有子结点，也就是说仍然会完整的执行一遍上面的流程。通过官方的文档，虽然它上面并没有提到层级比较，但是实际的比较的过程确实是按层进行的。博客上所说的三个策略应当结合起来看才是完整的diff算法的过程。从源码来看似乎也是如此<a href="https://segmentfault.com/a/1190000010686582">React源码之Diff算法</a><h3 id="我理解的react-diff算法"><a href="#我理解的react-diff算法" class="headerlink" title="我理解的react diff算法"></a>我理解的react diff算法</h3>我理解的react diff算法应当是把所谓的三大策略结合起来，就达到和官方文档流程一致的效果。即对虚拟DOM进行层级控制，进行分层比较。分层比较的过程中遵循官方文档上的四个步骤。<br>这里再分析一下react为提高分层比较的效率的一些方法。<h4 id="key"><a href="#key" class="headerlink" title="key"></a>key</h4>这个 key 值是在我们使用循环去渲染数据的时候必需指定的值。当子节点有了 key ，React 使用这个 key 去比较原来的树的子节点和之后树的子节点。对于 react 的组件，即便我们没有指定 key 值也会生成一个自带的 key 并进行比较。关于 key 如何提高效率，这里举官网的一个例子。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&quot;2015&quot;</span>&gt;</span>Duke<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&quot;2016&quot;</span>&gt;</span>Villanova<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&quot;2014&quot;</span>&gt;</span>Connecticut<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&quot;2015&quot;</span>&gt;</span>Duke<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&quot;2016&quot;</span>&gt;</span>Villanova<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
现在 React 知道有’2014’ key 的元素是新的， key为’2015’ 和’2016’的两个元素仅仅只是被移动而已。如果没有指定 key 值 react 将会比较每一个节点并进行修改，这样来看是不是极大的提高了效率？知道 key 的作用之后就不难理解为什么在 react 中使用索引作为 key 的情况下 react 会发出警告了。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&quot;0&quot;</span>&gt;</span>Duke<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span>&gt;</span>Villanova<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&quot;0&quot;</span>&gt;</span>Connecticut<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span>&gt;</span>Duke<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&quot;2&quot;</span>&gt;</span>Villanova<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
我们稍微改变一下官网的例子，改用索引作为 key 看看会发生什么。没错，你会发现当你在需要渲染的数组里插入元素时 key 就会发生改变。当 key 没有办法与元素进行一一对应时就失去了比较的优势，并且这个比较的过程还会变得不可预测。<h4 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate"></a>shouldComponentUpdate</h4>进行 diff 算法比较时，我们的组件很有可能是 props 和 state 都没有发生变化，那么可想而知就是整个组件很有可能是没有变化的，再通过 diff 重新再生成DOM节点无异于浪费时间。而 shouldComponentUpdate 这个声明周期函数允许我们自行判断组件是否需要更新，从而提高效率。<img src="https://pic1.zhimg.com/80/v2-6e443913477c19490b738141b24d309c_720w.jpg">
由图可知，shouldComponentUpdate在第一步调用得到nextState之后调用，因为nextState也是它的其中一个参数嘛~这个函数很重要，它是我们性能优化的一个很关键的点：由图可以看到，当shouldComponentUpdate返回false的时候，下面的一大块都不会被去执行，包括已经被优化的diff算法。  

</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p> <a href="https://react.html.cn/docs/reconciliation.html">一致性比较（Reconciliation）</a><br> <a href="https://www.jianshu.com/p/3ba0822018cf">React之diff算法</a><br> <a href="https://segmentfault.com/a/1190000010686582">React源码之Diff算法</a><br> <a href="https://zhuanlan.zhihu.com/p/43566956">从渲染原理到性能优化（二）– 更新渲染</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>快速排序和堆排序</title>
    <url>/2021/03/11/sort/</url>
    <content><![CDATA[<h3 id="快速排序和堆排序"><a href="#快速排序和堆排序" class="headerlink" title="快速排序和堆排序"></a>快速排序和堆排序</h3><p>最近对以前课上学到的排序方法忘得非常快，以至于学到的排序算法就只记得这两种了，赶紧写一篇来重复一下记忆，以免这两种都忘记了。<br>首先快速排序和堆排序都是在位的，也就是说进行排序不需要额外的空间(递归需要的除外)。印象中归并排序过程中要创建新的数组，这种需要<br>开辟额外空间的就不是在位的排序算法。这两种排序算法的平均时间复杂度都是Θ(nlogn)，关于时间复杂度的分析，目前也只记得一个迭代法，<br>步骤大概是</p>
<ol>
<li>写出递归表达式</li>
<li>对表达式的右边进行迭代替换，直到不能迭代为止</li>
<li>整理式子得到结果  </li>
</ol>
<p>为了便于理解这里举一个冒泡排序的例子，求排序算法时间复杂度也就是看需要排序的数n与交换比较次数T(n)之间的关系。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//众所周知T(1) = 0,在最坏的情况下有</span></span><br><span class="line">T(<span class="number">1</span>) = <span class="number">0</span>;</span><br><span class="line">T(<span class="number">2</span>) = <span class="number">1</span>;</span><br><span class="line">T(<span class="number">3</span>) = <span class="number">3</span>;</span><br><span class="line">T(<span class="number">4</span>) = <span class="number">6</span>;</span><br><span class="line"><span class="comment">//是不是发现了什么呢，现在写出递归表达式，也就是第一步</span></span><br><span class="line">T(n) = T(n-<span class="number">1</span>) + n-<span class="number">1</span> <span class="comment">//n&gt;1</span></span><br><span class="line"><span class="comment">//第二步对右边进行迭代</span></span><br><span class="line">T(n) = [T(n-<span class="number">2</span>) + (n-<span class="number">2</span>)] + (n-<span class="number">1</span>)</span><br><span class="line">...</span><br><span class="line">T(n) = T(<span class="number">1</span>) + n(n-<span class="number">1</span>) -<span class="number">1</span>-<span class="number">2</span>-<span class="number">3</span>-...-(n-<span class="number">1</span>)<span class="comment">//等差数列求和得</span></span><br><span class="line">T(n) = n(n-<span class="number">1</span>) - n(n-<span class="number">1</span>)/<span class="number">2</span> = n(n-<span class="number">1</span>)/<span class="number">2</span></span><br></pre></td></tr></table></figure>
<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>快速排序的思想在于招一个中心轴，然后把比这个轴小的数放在左边，大的放在右边。这样一轮调整就结束了，接着对左右两边的数进行递归，<br>就得到一个有序的结果。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quicksort</span>(<span class="params">arr,start,end</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(start&gt;=end)&#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> index = part(arr,start,end)</span><br><span class="line">    quicksort(arr,start,index - <span class="number">1</span>);</span><br><span class="line">    quicksort(arr,index+<span class="number">1</span>,end);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">part</span>(<span class="params">arr,start,end</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//pivotValue基准值，选什么都可以这里选最后一个</span></span><br><span class="line">    <span class="keyword">let</span> pivotValue = arr[end];</span><br><span class="line">    <span class="keyword">let</span> pivotIndex = start;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = start;i&lt;end;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]&lt;pivotValue)&#123;</span><br><span class="line">            <span class="comment">//交换，解构赋值</span></span><br><span class="line">            [arr[i],arr[pivotIndex]] = [arr[pivotIndex],arr[i]];</span><br><span class="line">            pivotIndex++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最后把基准值换过来，index左边小于基准值，右边大于基准值</span></span><br><span class="line">    [arr[pivotIndex],arr[end]] = [arr[end],arr[pivotIndex]];</span><br><span class="line">    <span class="keyword">return</span> pivotIndex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">56</span>,<span class="number">7</span>,<span class="number">23</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">57</span>];</span><br><span class="line">quicksort(arr,<span class="number">0</span>,arr.length-<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure>
<p>需要注意的是快速排序的效果十分依赖中心轴选的好不好，如果每次选的中心轴都恰好是最大或者最小的数，在这种情况下就会发现和上面的冒泡排序<br>是一模一样的结果。</p>
<h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p>堆是一种除了最后一层以外近似完全二叉树的数据结构，学习堆排序是变治法这一章中有了解到。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">heapsort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = maxheap(arr);</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> len = res.length-<span class="number">1</span>;len&gt;-<span class="number">1</span>;len--)&#123;</span><br><span class="line">        <span class="comment">//交换堆顶元素，并且不参与下一轮堆调整</span></span><br><span class="line">        [res[<span class="number">0</span>],res[len]] = [res[len],res[<span class="number">0</span>]];</span><br><span class="line">        changeheap(arr,<span class="number">0</span>,len);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">maxheap</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = arr;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="built_in">Math</span>.floor(res.length/<span class="number">2</span>); index &gt; -<span class="number">1</span>; index--) &#123;</span><br><span class="line">      changeheap(res,index,res.length);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeheap</span>(<span class="params">arr, index,len</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> left = index * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> right = index * <span class="number">2</span> + <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">let</span> max = index;</span><br><span class="line">  <span class="keyword">if</span> (left&lt;len &amp;&amp; arr[left] &gt; arr[max]) &#123;</span><br><span class="line">    max = left;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(right&lt;len &amp;&amp; arr[right] &gt; arr[max])&#123;</span><br><span class="line">    max = right;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(max != index)&#123;</span><br><span class="line">      <span class="comment">//如果当前值不是最大就和子节点最大的交换，和谁交换就调整谁</span></span><br><span class="line">      [arr[index],arr[max]] = [arr[max],arr[index]];</span><br><span class="line">      changeheap(arr,max,len);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> test = [<span class="number">9</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">1</span>];</span><br><span class="line"><span class="built_in">console</span>.log(heapsort(test));</span><br></pre></td></tr></table></figure>
<p>进行堆排序的过程首先要先建堆，构建大堆顶或者小堆顶都可。然后把堆顶和堆尾元素进行交换(交换的堆尾不参与堆调整)，然后进行堆调整,对于堆调整引起的子结点的变化的进行递归调整。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>身份验证用cookie还是token？</title>
    <url>/2021/03/24/token/</url>
    <content><![CDATA[<h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><p>&nbsp;&nbsp;作为浏览器早期的用户身份验证方案，其实我自己使用的情况并不多。也可能并不是使用的不多，是因为使用了cookie的身份验证方案，作为一个前端开发人员甚至没有任何的察觉。说到cookie这里就不得不提在服务端里cookie的一位好兄弟session，cookie和session合作完成了用户验证的过程，如图<br><img src="https://raw.githubusercontent.com/tanchaoyu/tanchaoyu.github.io/main/img/cookie.png"><br>&nbsp;&nbsp;用户在登录时，将自己的用户名信息和密码发送到后端，服务端在数据库验证检查无误后创建session。而这个session呢可以把用户的信息，如姓名、年龄和权限等保存起来，同时服务端维持session的状态，并把session的唯一标识sessionid写入cookie中(服务端是可以操纵cookie的，这就是有可能服务端实现了用户验证的方案而前端开发人员却浑然不知的原因)。在后续的请求当中，都会在请求头中携带cookie的信息。而服务端获取其中的sessionid后，便可以通过验证相应的session来区分是属于哪个用户。<br>&nbsp;&nbsp;但这便利的登录功能背后可能隐藏着安全的风险，伪造请求攻击(CRSF)就是利用这一点，伪装成被信任的用户向服务端请求操作，而服务端无法识别是否是真实的用户操作时，就能达到目的。例如，在A登录了网站B(xxx.com)后，网站B就在cookie中保存了A的sessionid。此时用户A已经成功登录，是被网站B所信任的用户。但用户A又访问了网站C，在网站C中的一张图片的src中的信息为(xxx.com/operation=”xxx”)。而此时用户A在不知情的情况下便完成了在网站B上的操作，因为是通过cookie进行的身份验证，而此时cookie还没有失效。那么如果把接口都改为post那是否就安全了呢。实际上并不是，因为完全可以在网站C中通过模拟表单来完成请求。随着时间的推移，set-cookie中的默认属性改为了Lax,简单来说就是限制对第三方网站cookie。如图<br><img src="https://raw.githubusercontent.com/tanchaoyu/tanchaoyu.github.io/main/img/samesite.png"></p>
<h3 id="token"><a href="#token" class="headerlink" title="token"></a>token</h3><img src="https://raw.githubusercontent.com/tanchaoyu/tanchaoyu.github.io/main/img/token.png">
token的解决方案在于，用户在登录之后服务端会返回一串经过加密后的token信息。客户端将token信息保存起来，在后续的请求中在http的头部信息中携带token信息，服务端在收到后对token信息进行解密验证，判断token信息是否有效和获取用户信息等。咋一看与cookie和session的机制并没有什么不同，但实际上在服务端不需要维护session的状态，减轻的对服务端的负担。token的使用非常灵活，可以设置两个token，一个用于维持用户的登录状态(RefreshToken),一个用于请求时发送(accessToken)。当accessToken过期之后可以通过验证RefreshToken获取新的accessToken进行请求。当RefreshToken也过期之后再进行重新登录。像是RefreshToken就适合保存在localstorage中，值得一提的是localstorage也受到同源策略的保护
<img src="https://image-static.segmentfault.com/379/307/3793073884-56950753e65db_fix732">

<h3 id="都有缺憾"><a href="#都有缺憾" class="headerlink" title="都有缺憾"></a>都有缺憾</h3><p>缺憾来自于XSS攻击，cookie的 HTTP only 虽然保护cookie被恶意js代码获取，但这仅仅是手段之一。如果我能够插入恶意js代码，那我直接插入一段请求代码岂不是简便很很多。所以正因为XSS攻击的危害很大，所以才需要多重的防护手段去防御这种注入代码的行为。我对安全方面了解并不多列出收集到的一些方法</p>
<ul>
<li>服务器对输入脚本进行过滤或转码</li>
<li>前端对输入进行转码或者限制输入</li>
<li>Cookie使用HttpOnly属性</li>
<li>添加验证码防止脚本冒充用户提交危险操作</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP">CSP</a><br>CSP有如下几个功能：</li>
</ul>
<ol>
<li>限制加载其他域下的资源文件，这样即使黑客插入了一个JS文件，这个文件也是无法被加载的</li>
<li>禁止向第三方域提交数据，这样用户数据也不会外泄</li>
<li>禁止执行内联脚本和未授权脚本</li>
<li>还提供上报机制，这样可以帮助我们尽快发现有哪些XSS攻击，以便尽快修复问题。</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
</search>
