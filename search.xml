<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>前端发布订阅模式</title>
    <url>/2021/03/07/EventEmitter/</url>
    <content><![CDATA[<h3 id="什么是发布订阅模式"><a href="#什么是发布订阅模式" class="headerlink" title="什么是发布订阅模式"></a>什么是发布订阅模式</h3><p>比较官方的解释是：基于一个事件（主题）通道，希望接收通知的对象 Subscriber 通过自定义事件订阅主题，被激活事件的对象 Publisher 通过发布主题事件的方式通知各个订阅该主题的 Subscriber 对象。然而我觉着这个解释并不那么通俗易懂，这里放一张网上的图来辅助理解<br><img src="https://user-gold-cdn.xitu.io/2018/8/29/165844227f32dac6?imageslim"><br>按照我个人比较直白的理解，发布订阅模式这个词就很容易让我联想到以前的邮箱订阅的报纸，这个报纸厂就是我们订阅的目标，每当这个报纸厂发布了新的一期报纸，他就通过邮箱(也就是通俗的通道)通知订阅了报纸的用户，用户取完报纸之后该做什么，那就是用户自己的问题了。有了这个想法之后，把这个模式套入我们前端日常开发的逻辑之中，便会得出一些问题新的解决方案。浏览器的一些 API 如 click 事件，我们可以通过在用户点击 UI 之后获取到这个事件，然后执行一些交互效果，这算不算是一个简单的一对一的发布订阅？我自己的理解应该是的，UI 即发布者，通过事件通知开发者，然后做出相应。一对一的情况是这样，那么一对多呢？这时我又想起来事件监听(addEventListener)，初学的时候用原生 JS 开发一个网页，头顶的导航栏跳转至不同的页面。如果一个个添加事件不仅代码啰嗦不好维护且挂载太多事件会对浏览器造成负担，于是就在父元素上添加事件监听，通过事件冒泡和 currentTarget 判断点击的真正元素，进而跳转至特定的界面。当时只觉得方便，现在感觉这其实也是一种发布订阅模式，根据发布事件的不同执行的订阅操作。</p>
<h3 id="何时使用发布订阅模式"><a href="#何时使用发布订阅模式" class="headerlink" title="何时使用发布订阅模式"></a>何时使用发布订阅模式</h3><ol>
<li>接着上面的继续说，假设用户触发一个事件需要执行大量的操作(实际上应该不太可能)，全部写在一个事件触发的函数里显然是不合适的，这个时候就可以应用上发布订阅模式，我们可以让相关的操作去订阅这个事件，每当触发这个事件时发布这个事件，然后通知订阅者去执行相应的操作，这样子不就避免了在一个事件函数里面写大量代码的问题了吗？而且不需要其中一个操作的时候直接将其取消订阅即可，操作十分方便。(说到提交事件脑子里面又有画面了，Redux 不就是通过 dispatch 一个或多个 action 给 store 然后调用 reducer 去处理，那岂不也是…但 Redux 又略有不同，学识浅薄不敢妄下断言，后面有时间再单独讲 Rudex，雾)。<br>根据矛盾相互转化，这个优势同样可能成为缺陷。可以设想一种情况，如果订阅的事件过多，且关联性不大时改如何处理？这同样是很麻烦的一个问题。这样我们就应该在添加订阅时仅选择那些关键且密切相关的操作。</li>
<li>多请求和大文件传输，假设现在有 100 个请求需要同时完成或者后端限制单次上传文件的大小，你被迫把文件切割成了 100 份上传，该如何处理？其实也简单，promise.all 轻松解决。但是在请求这么多的情况下 promise.all 真的合理吗？浏览器同时允许的请求数量时有限制的，请求等待的时间太长便会超时。这种情况下发布订阅模式可以解决这个问题。每次执行一小部分请求可以用 promise.all 控制，我们可以订阅后端返回的内容，如果返回成功则再发送请求。如果失败，在多请求的情况下可以把失败的请求保存起来，等一轮结束之后在去补发失败的请求。在大文件上传的情况也失败也可以立刻重发当前这一批请求续上之前的片段。</li>
</ol>
<h3 id="大佬如何使用发布订阅模式"><a href="#大佬如何使用发布订阅模式" class="headerlink" title="大佬如何使用发布订阅模式"></a>大佬如何使用发布订阅模式</h3><h4 id="vue-双向数据绑定"><a href="#vue-双向数据绑定" class="headerlink" title="vue 双向数据绑定"></a>vue 双向数据绑定</h4><img src="https://image-static.segmentfault.com/393/893/3938939389-5d25a35ab69ee_articlex">  
利用 Object.defineProperty() 对数据进行劫持，设置一个监听器 Observer，用来监听数据对象的属性，如果属性上发生变化了，交由 Dep 通知订阅者 Watcher 去更新数据，最后指令解析器 Compile 解析对应的指令，进而会执行对应的更新函数，从而更新视图，实现了双向绑定。

<ol>
<li>Observer (数据劫持)</li>
<li>Dep (发布订阅)</li>
<li>Watcher (数据监听)</li>
<li>Compile (模版编译)</li>
</ol>
<h4 id="父子组件通信"><a href="#父子组件通信" class="headerlink" title="父子组件通信"></a>父子组件通信</h4><p>Vue 中，父组件通过 props 向子组件传递数据（自上而下的单向数据流）。父子组件之间的通信，通过自定义事件即 $on , $emit 来实现（子组件 $emit，父组件 $on)。<br>原理其实就是 $emit 发布更新通知，而 $on 订阅接收通知。Vue 中还实现了 $once（一次监听），$off（取消订阅）。</p>
<pre>
    // 订阅
vm.$on('test', function (msg) {
    console.log(msg)
})

// 发布
vm.$emit('test', 'hi')
</pre>
<h3 id="自己实现简单的发布订阅"><a href="#自己实现简单的发布订阅" class="headerlink" title="自己实现简单的发布订阅"></a>自己实现简单的发布订阅</h3><pre>
class EventEmitter {
    constructor(){
        this.event = {}
    }
    on(eventName,fn){
        if(this.event[eventName]){
            this.event[eventName].push(fn);
        }
        else{
            this.event[eventName] = [fn];
        }
    }
    emit(eventName){
        if(this.event[eventName]){
            for(let fn of this.event[eventName]){
                fn();
            }
        }
    }
    remove(eventName,fn){
        if(this.event[eventName]){
            this.event[eventName] = this.event[eventName].filter(fun=>fun!=fn);
        }
    }
}
let em = new EventEmitter();
function happy(){
    console.log('happy');
}
function happy2(){
    console.log('happy2');
}
function said(){
    console.log('said');
}
em.on('sayhappy',happy)
em.on('saysaid',said)
em.emit('sayhappy');
em.emit('saysaid');
em.on('sayhappy',happy2)
em.emit('sayhappy');
em.remove('saysaid',said)
em.emit('saysaid');
</pre>
<p>结果：<img src="http://120.76.61.201:9999/eventemitter.png"><br>发布订阅模式并不难，难的是如何考虑到合适的时机去使用。技能上的差距或许还可以靠努力追上，但思想上的差距我觉得应该只有靠多方便知识的累积并且不断思考才能有些许提升吧。或者这就是业内大佬能设计出这些绝妙的框架的原因，和他们差距还是很大，还是应该多学习。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://segmentfault.com/a/1190000019722065">JavaScript 设计模式（六）：观察者模式与发布订阅模式</a>  </p>
<p><a href="https://www.jianshu.com/p/e0575e17de2a">一个例子 - 看尽并手写JS发布订阅模式</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>flex弹性布局</title>
    <url>/2021/02/12/flex/</url>
    <content><![CDATA[<h3 id="flex弹性布局"><a href="#flex弹性布局" class="headerlink" title="flex弹性布局"></a>flex弹性布局</h3><p>flex弹性布局出来已经有相当长一段时间了，网上的教程也非常多，我是通过 <a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">阮一峰的博客</a> 学习的。我觉得博客上已经写得很好了。我这里只提一下我当时对页面正常流和盒模型都不太了解的时候flex容易让人感到困惑的点。  </p>
<h4 id="采用-Flex-布局的元素，称为-Flex-容器（flex-container），简称”容器”。它的所有子元素自动成为容器成员，称为-Flex-项目（flex-item），简称”项目”。"><a href="#采用-Flex-布局的元素，称为-Flex-容器（flex-container），简称”容器”。它的所有子元素自动成为容器成员，称为-Flex-项目（flex-item），简称”项目”。" class="headerlink" title="采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。"></a>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。</h4><p>根据这句话进行区分，关于flex的样式即可分为两类，一类作用在容器上，一类作用在项目上。注意区分样式是作用在容器还是项目上，避免写在错误的位置上达不到预期的效果。另外由于我当时看文章没有耐心，喜欢边看边写，结果就是在学会容器上的功能以后已经可以达到大部分的布局效果(水平垂直居中等)马马虎虎能看得过去，就没有再看作用在项目上的样式。导致后续在有关项目元素上相关样式的调整一直不知道怎么处理，经常用什么width，margin之类的去处理效果又不是很好，还麻烦，时隔一个月后重新看完了文章才发现本来就有更便捷效果又好的解决方案，从此以后知道看文章马虎不得。  </p>
<h4 id="要理解flex轴线"><a href="#要理解flex轴线" class="headerlink" title="要理解flex轴线"></a>要理解flex轴线</h4><p>flex里的样式和布局是和轴线有很大关系的，项目也是根据轴线进行排列的。当知道flex存在一条关键的主轴和交叉轴之后再去看flex样式的设置就会觉得很容易理解，他的规定是那么顺其自热。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>城南花已开</title>
    <url>/2021/02/11/music1/</url>
    <content><![CDATA[<h3 id="网易云评论最多的纯音乐"><a href="#网易云评论最多的纯音乐" class="headerlink" title="网易云评论最多的纯音乐"></a>网易云评论最多的纯音乐</h3><p>作为第一篇纯音乐的分享，看了半天歌单也决定不了选哪一首。索性把选择交给网友，选出这首评论最多的纯音。“城南花已开，愿君永常在”虽然这首曲背后的故事让人觉得很惋惜，但是这首曲子的曲调并不特别伤感，本意也是作者鼓舞一名患者粉丝而作的，反而有种积极向上的感觉。抛开背景故事不谈，我觉得前半段重复太多我不是很喜欢，中间舒缓的部分比较喜欢。但是哪有单独抛开背景的音乐呢，王国维有云“一切景语皆情语”我觉得音乐也是这样，如果不附带自己或他人的感情，花既是花，草既是草除了本身的姿态并无更多可言之处。<br><img src="https://w.wallhaven.cc/full/m9/wallhaven-m9pq1y.jpg"/></p>
]]></content>
      <categories>
        <category>纯音乐</category>
      </categories>
      <tags>
        <tag>music</tag>
      </tags>
  </entry>
</search>
